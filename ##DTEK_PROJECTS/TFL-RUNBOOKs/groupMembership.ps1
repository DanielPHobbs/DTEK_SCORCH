# Set script parameters from runbook data bus and Orchestrator global variables
# Define any inputs here and then add to the $argsArray and script block parameters below 

$DataBusInput0 = "\`d.T.~Vb/{E0CE9640-35DC-4A14-BBBD-2C8F4E50B77E}\`d.T.~Vb/" #Pass ActiveRoles Server FQDN"
$DataBusInput1 = "\`d.T.~Vb/{A0F07C66-55A6-475F-86B4-EC669FF8BC3D}\`d.T.~Vb/" #Pass Domain Name to Work On
$DataBusInput2 = "\`d.T.~Ed/{565873AC-6E1A-4287-A6B5-B1E39752582F}.Output text\`d.T.~Ed/" #Pass Username List
$DataBusInput3 = "\`d.T.~Ed/{C4E972B2-7F90-4334-B772-E751391651B4}.Output text\`d.T.~Ed/" #Pass Group List
$DataBusInput4 = "\`d.T.~Ed/{BB3526EE-AD31-46AC-A514-CE1B2025BE47}.Output text\`d.T.~Ed/" #Pass Action (Add or Remove)
$DataBusInput5 = "\`d.T.~Ed/{F4BA7C2B-DA25-4264-900F-CACFA3A228F7}.SRID\`d.T.~Ed/" #Pass SRID (REQ NO) to Stamp Custom Attribute

#-----------------------------------------------------------------------

## Initialize result and trace variables
# $ResultStatus provides basic success/failed indicator
# $ErrorMessage captures any error text generated by script
# $Trace is used to record a running log of actions
$ResultStatus = ""
$ErrorMessage = ""
$Trace = (Get-Date).ToString() + "`t" + "Runbook activity script started" + " `r`n"
       
# Create argument array for passing data bus inputs to the external script session
$argsArray = @()
$argsArray += $DataBusInput0
$argsArray += $DataBusInput1
$argsArray += $DataBusInput2
$argsArray += $DataBusInput3
$argsArray += $DataBusInput4
$argsArray += $DataBusInput5

# Establish an external session (to localhost) to ensure 64bit PowerShell runtime using the latest version of PowerShell installed on the runbook server
# Use this session to perform all work to ensure latest PowerShell features and behavior available
$Session = New-PSSession -ComputerName localhost

# Invoke-Command used to start the script in the external session. Variables returned by script are then stored in the $ReturnArray variable
$ReturnArray = Invoke-Command -Session $Session -Argumentlist $argsArray -ScriptBlock {
    # Define a parameter to accept each data bus input value. Recommend matching names of parameters and data bus input variables above
    Param(
        [ValidateNotNullOrEmpty()]
        [string]$DataBusInput0,
        
        [ValidateNotNullOrEmpty()]
        [string]$DataBusInput1,

        [ValidateNotNullOrEmpty()]
        [string]$DataBusInput2,

        [ValidateNotNullOrEmpty()]
        [string]$DataBusInput3,

        [ValidateNotNullOrEmpty()]
        [string]$DataBusInput4,

        [ValidateNotNullOrEmpty()]
        [string]$DataBusInput5
    )

    # Define function to add entry to trace log variable
    function AppendLog ([string]$Message)
    {
        $script:CurrentAction = $Message
        $script:TraceLog += ((Get-Date).ToString() + "`t" + $Message + " `r`n")
    }

    # Set external session trace and status variables to defaults
    $ResultStatus = ""
    $ErrorMessage = ""
    $script:CurrentAction = ""
    $script:TraceLog = ""

    try 
    {
        # Add startup details to trace log
        AppendLog "Script now executing in external PowerShell version [$($PSVersionTable.PSVersion.ToString())] session in a [$([IntPtr]::Size * 8)] bit process"
        AppendLog "Running as user [$([Environment]::UserDomainName)\$([Environment]::UserName)] on host [$($env:COMPUTERNAME)]"
        AppendLog "Parameter values received: DatabusInput0=[$DataBusInput0]; DataBusInput1=[$DataBusInput1]; DataBusInput2=[$DataBusInput2]; DataBusInput3=[$DataBusInput3]; DataBusInput4=[$DataBusInput4]; DataBusInput5=[$DataBusInput5]"

        # # # # # # # # # # # # # # # # # # #
        #    GROUP MEMBERSHIP AMENDMENTS    #
        # # # # # # # # # # # # # # # # # # #

            AppendLog "Loading Quest Powershell Module"
        Add-PSSnapin Quest.ActiveRoles.ADManagement
            AppendLog "Module Load Command Completed"

            AppendLog "Connecting to ActiveRoles Server $DataBusInput0"
        Connect-QADService -Proxy -Service $DataBusInput0 -WarningAction Stop | Out-Null
            AppendLog "ARS Connection Command Completed"

            AppendLog "----------"  
            AppendLog "Splitting Received Users & Groups into seperate arrays..."
        $OriginalUserImportArray=$DataBusInput2.split(";") #User Split to array
        $OriginalGroupImportArray=$DataBusInput3.split(";") #Group Split to array
        $OriginalUserImportArrayCount=($OriginalUserImportArray).Count #Total User Received Count
        $OriginalGroupImportArrayCount=($OriginalGroupImportArray).Count #Total Group Received Count
            AppendLog "Arrays Created... [Total Users Received: $OriginalUserImportArrayCount] [Total Groups Received: $OriginalGroupImportArrayCount]"
            AppendLog "----------"  
            AppendLog "OriginalUserImportArray is $OriginalUserImportArray"
            AppendLog "OriginalUserImportArray is $OriginalGroupImportArray"
            AppendLog "----------"  
            AppendLog "Validating received users against Active Directory..."

                        foreach ($OriginalUser in $OriginalUserImportArray)
                        {
                        
                                if ((Get-QADUser "$OriginalUser").Count -eq 0){
                                $ValidatedBadUsers+="$OriginalUser;"} #Add invalid users to the ValidatedBadUsers Variable
                                else {
                               $ValidatedGoodUsers+="$OriginalUser;"} #Add Validated users to the ValidatedGoodUsers Variable
                        }

                        if ($ValidatedGoodUsers -ne $null) { #If validated users detected do the following...
                        $ValidatedGoodUsers=($ValidatedGoodUsers).TrimEnd(";") #Remove the last semi-colon from the string
                        $ValidatedGoodUsersArray=($ValidatedGoodUsers).Split(";") #Split all entries into an array
                        }

                        if($ValidatedBadUsers -ne $null) { #If invalid users detected do the following...
                        $ValidatedBadUsers=($ValidatedBadUsers).TrimEnd(";") #Remove the last semi-colon from the string
                        $ValidatedBadUsersArray=($ValidatedBadUsers).Split(";") #Split all entries into an array
                        }
            AppendLog "User Validation Complete."
            AppendLog "----------"  
            AppendLog "Validating received groups against Active Directory..."

                        foreach ($OriginalGroup in $OriginalGroupImportArray)
                        {
                        
                                if ((Get-QADGroup "$OriginalGroup").Count -eq 0){
                                $ValidatedBadGroups+="$OriginalGroup;"} #Add invalid groups to the ValidatedBadGroups Variable
                                else {
                               $ValidatedGoodGroups+="$OriginalGroup;"} #Add validated groups to the ValidatedGoodGroups Variable
                        }

                        if ($ValidatedGoodGroups -ne $null) { #If validated groups detected do the following...
                        $ValidatedGoodGroups=($ValidatedGoodGroups).TrimEnd(";") #Remove the last semi-colon from the string
                        $ValidatedGoodGroupsArray=($ValidatedGoodGroups).Split(";") #Split all entries into an array
                        }

                        if($ValidatedBadGroups -ne $null) { #If invalid groups detected do the following...
                        $ValidatedBadGroups=($ValidatedBadGroups).TrimEnd(";") #Remove the last semi-colon from the string
                        $ValidatedBadGroupsArray=($ValidatedBadGroups).Split(";") #Split all entries into an array
                        }
            AppendLog "Group Validation Complete."
            AppendLog "----------"  
            AppendLog "Calculating Totals..."            
        $ValidatedBadUsersCount=($ValidatedBadUsersArray).Count #Total Determined Invalid Users
        $ValidatedGoodUsersCount=($ValidatedGoodUsersArray).Count #Total Determined Valid Users
        $ValidatedBadGroupsCount=($ValidatedBadGroupsArray).Count #Total Determined Invalid Groups
        $ValidatedGoodGroupsCount=($ValidatedGoodGroupsArray).Count #Total Determined Valid Groups
            AppendLog "----------"            
            AppendLog "[Total Good Users: $ValidatedGoodUsersCount]"
            AppendLog "Good User List: $ValidatedGoodUsers"
            AppendLog "[Total Bad Users: $ValidatedBadUsersCount]"
            AppendLog "Bad User List: $ValidatedBadUsers"
            AppendLog "----------"
            AppendLog "[Total Good Groups: $ValidatedGoodGroupsCount]"
            AppendLog "Good Group List: $ValidatedGoodGroups"
            AppendLog "[Total Bad Groups: $ValidatedBadGroupsCount]"
            AppendLog "Bad Group List: $ValidatedBadGroups"
            AppendLog "----------"
        $GrandTotalValidatedGood=($ValidatedGoodUsersCount+$ValidatedGoodGroupsCount)
        $GrandTotalValidatedBad=($ValidatedBadUsersCount+$ValidatedBadGroupsCount)
            AppendLog "[GRAND TOTAL - GOOD: $GrandTotalValidatedGood]"
            AppendLog "[GRAND TOTAL - BAD: $GrandTotalValidatedBad]"
            AppendLog "----------"

If($ValidatedGoodUsersCount -gt 0 -and $ValidatedGoodGroupsCount -gt 0)
{

            If ($DataBusInput4 -eq "Add"){ # Work contained in this loop if the request is to ADD users to groups
                AppendLog "Service Request is asking to ADD users... Processing with validated groups/users only..."
                    foreach ($RealGrouptoProcess in $ValidatedGoodGroupsArray){
                        AppendLog "Now adding $ValidatedGoodUsersArray to $RealGrouptoProcess..."
                        Add-QADGroupMember $RealGrouptoProcess $ValidatedGoodUsersArray -WarningAction Stop | Out-Null
                        AppendLog "Successful."
                        }
                AppendLog "----------" 
                AppendLog "Now Stamping Custom Attribute edsva-TfL-SRAUTO-LastREQ on all users modified..."
                    Foreach($UsertoStamp in $ValidatedGoodUsersArray){
                    AppendLog "Updating attribute for $UsertoStamp..."
                        Set-QADUser "$DataBusInput1\$UsertoStamp" -ObjectAttributes @{'edsva-TfL-SRAUTO-LastREQ'="$DataBusInput5"} -WarningAction Stop | Out-Null
                }

                AppendLog "Custom Attribute edsva-TfL-SRAUTO-LastREQ updated on all users modified successfully."
                AppendLog "----------" 
            }

            If ($DataBusInput4 -eq "Remove"){ # Work contained in this loop if the request is to REMOVE users from groups
                AppendLog "Service Request is asking to REMOVE users... Processing with validated groups/users only..."
                    foreach ($RealGrouptoProcess in $ValidatedGoodGroupsArray){
                        AppendLog "Now removing $ValidatedGoodUsersArray from $RealGrouptoProcess..."
                        Remove-QADGroupMember $RealGrouptoProcess $ValidatedGoodUsersArray -WarningAction Stop | Out-Null
                        AppendLog "Successful."
                        }
                AppendLog "Now Stamping Custom Attribute edsva-TfL-SRAUTO-LastREQ on all users modified..."
                    Foreach($UsertoStamp in $ValidatedGoodUsersArray){
                    AppendLog "Updating attribute for $UsertoStamp..."
                        Set-QADUser "$DataBusInput1\$UsertoStamp" -ObjectAttributes @{'edsva-TfL-SRAUTO-LastREQ'="$DataBusInput5"} -WarningAction Stop | Out-Null
                    }

                AppendLog "Custom Attribute edsva-TfL-SRAUTO-LastREQ updated on all users modified successfully."
                
                 


            }
            



}
else
{
AppendLog "Insufficient validated users or groups to continue - script will now start to terminate"
}
if($GrandTotalValidatedBad -eq "0"){$ScriptOutputRoute="ScriptFullSuccess"}
if($ValidatedBadGroupsCount -eq "0" -and $ValidatedBadUsersCount -ne "0"){$ScriptOutputRoute="ScriptPartialSuccess-UserIssue"}
if($ValidatedBadGroupsCount -ne "0"){$ScriptOutputRoute="ScriptPartialSuccess-GroupIssue"}                         
                                
       
        # Validate results and set return status
        AppendLog "Finished work, determining result"
        $EverythingWorked = $true
        if($EverythingWorked -eq $true)
        {
           $ResultStatus = "Success"
        }
        else
        {
            $ResultStatus = "Failed"
        }
    }
    catch
    {
        # Catch any errors thrown above here, setting the result status and recording the error message to return to the activity for data bus publishing
        $ResultStatus = "Failed"
        $ErrorMessage = $error[0].Exception.Message
        AppendLog "Exception caught during action [$script:CurrentAction]: $ErrorMessage"
    }
    finally
    {
        # Always do whatever is in the finally block. In this case, adding some additional detail about the outcome to the trace log for return
        if($ErrorMessage.Length -gt 0)
        {
            AppendLog "Exiting external session with result [$ResultStatus] and error message [$ErrorMessage]"
        }
        else
        {
            AppendLog "Exiting external session with result [$ResultStatus]"
        }
        
    }

    # Return an array of the results. Additional variables like "myCustomVariable" can be returned by adding them onto the array
    $resultArray = @()
    $resultArray += $ResultStatus
    $resultArray += $ErrorMessage
    $resultArray += $script:TraceLog
    $resultArray += $GrandTotalValidatedGood
    $resultArray += $GrandTotalValidatedBad
    $resultArray += $ValidatedGoodUsers
    $resultArray += $ValidatedBadUsers
    $resultArray += $ValidatedGoodGroups
    $resultArray += $ValidatedBadGroups
    $resultArray += $ValidatedGoodUsersCount
    $resultArray += $ValidatedBadUsersCount
    $resultArray += $ValidatedGoodGroupsCount
    $resultArray += $ValidatedBadGroupsCount
    $resultArray += $ScriptOutputRoute

    return  $resultArray  
     
}#End Invoke-Command

# Get the values returned from script session for publishing to data bus
$ResultStatus = $ReturnArray[0]
$ErrorMessage = $ReturnArray[1]
$Trace += $ReturnArray[2]
$GrandTotalValidatedGood += $ReturnArray[3]
$GrandTotalValidatedBad += $ReturnArray[4]
$ValidatedGoodUsers += $ReturnArray[5]
$ValidatedBadUsers += $ReturnArray[6]
$ValidatedGoodGroups += $ReturnArray[7]
$ValidatedBadGroups += $ReturnArray[8]
$ValidatedGoodUsersCount += $ReturnArray[9]
$ValidatedBadUsersCount += $ReturnArray[10]
$ValidatedGoodGroupsCount += $ReturnArray[11]
$ValidatedBadGroupsCount += $ReturnArray[12]
$ScriptOutputRoute += $ReturnArray[13]


# Record end of activity script process
$Trace += (Get-Date).ToString() + "`t" + "Script finished" + " `r`n"

# Close the external session
Remove-PSSession $Session